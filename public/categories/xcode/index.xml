<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Xcode on Vikram Bahl</title>
    <link>https://vikrambahl.com/categories/xcode/</link>
    <description>Recent content in Xcode on Vikram Bahl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2021, Vikram Bahl; all rights reserved.</copyright>
    <lastBuildDate>Fri, 19 Feb 2016 08:14:49 +0000</lastBuildDate><atom:link href="https://vikrambahl.com/categories/xcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessing files stored by the iOS Simulator</title>
      <link>https://vikrambahl.com/accessing-files-stored-ios-simulator/</link>
      <pubDate>Fri, 19 Feb 2016 08:14:49 +0000</pubDate>
      
      <guid>https://vikrambahl.com/accessing-files-stored-ios-simulator/</guid>
      <description>
        
          &lt;p&gt;iOS provides limited access to the directory structure for your device. You may often wonder what it looks like. If you are creating a temporary plist or generating a text file, you may want to see where exactly it gets stored on your device. For those with non-jailbroken devices, this can be a difficult task. Yes, you can always work with relative paths inside Xcode and there’s no problem, but certain frameworks generate files which are stored locally on the device. For eg.,  the &lt;a href=&#34;http://www.politepix.com/openears/&#34;&gt;OpenEars&lt;/a&gt; library running the &lt;a href=&#34;http://cmusphinx.sourceforge.net/wiki/&#34;&gt;CMU speech recognition&lt;/a&gt; engine generates a dictionary and language model (.arpa and .DMP) and stores it ‘somewhere’ on the device. To access the directory structure for your iOS simulator, type in the following command in Terminal:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;pre lang=&#34;bash&#34;&gt;open -R `find ~/Library/Developer/CoreSimulator/Devices \
 -type d -depth 5 -name &#34;*.app&#34; -print0 | xargs -0 stat -f \
 &#34;%m %N&#34; | sort -rn | head -1 | cut -f2- -d&#34; &#34;`

&lt;/pre&gt;
&lt;p&gt;That will open the folder where your simulator has stored your filed. Now you just have to search for your filename and voila. Note that the above command opens up 5 levels deep in your folder structure. So you may have to move up a few level and then search for the file you are looking for.&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/macos-folder.png&#34;&gt;

        
      </description>
    </item>
    
    <item>
      <title>Converting Storyboard from iPhone to iPad in 4 simple steps</title>
      <link>https://vikrambahl.com/convert-storyboard-iphone-ipad-simple/</link>
      <pubDate>Fri, 04 Jul 2014 09:56:41 +0000</pubDate>
      
      <guid>https://vikrambahl.com/convert-storyboard-iphone-ipad-simple/</guid>
      <description>
        
          &lt;p&gt;Developing a universal iOS app means that you have to maintain two storyboards. Sometimes, all you want is your iPad user interface to be somewhat similar to your iPhone UI. However, making 2 interfaces is a big pain and a mega resource expender. The solution is simple. Just create your iPhone UI in Xcode as you do, then to make a new storyboard for the iPad without doing unnecessary back breaking, do the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a copy of your iPhone storyboard in Xcode. You can do this by right clicking on the storyboard file in Xcode and selecting “Show in Finder”. Now locate the storyboard file in the finder window that pops (you may have to go into a few folders to find it). Copy the file to desktop and rename it “MainStoryboard_iPad.storyboard”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now open this file “MainStoryboard_iPad.storyboard” in a text editor like Text Wrangler or Sublime Text etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now perform the following 2 search and replaces in the “MainStoryboard_iPad.storyboard” file:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for&lt;/p&gt;
&lt;pre&gt;targetRuntime=&#34;iOS.CocoaTouch&#34;&lt;/pre&gt;
&lt;p&gt;and replace it with&lt;/p&gt;
&lt;pre&gt;targetRuntime=&#34;iOS.CocoaTouch.iPad&#34;&lt;/pre&gt;
&lt;p&gt; &lt;/li&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for&lt;/p&gt;
&lt;pre&gt;&amp;lt;simulatedScreenMetrics key=&#34;destination&#34; type=&#34;retina4&#34;/&amp;gt;&lt;/pre&gt;
&lt;p&gt;and replace it with&lt;/p&gt;
&lt;pre&gt;&amp;lt;simulatedScreenMetrics key=&#34;destination&#34;/&amp;gt;&lt;/pre&gt;&lt;/ul&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Save the file. Reopen Xcode and add this file to the project either by dragging and dropping to the project folder or by going to File -&amp;gt; Add Files to &lt;your-project-name&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now head over to the ‘General’ section by choosing your applications target in Xcode. Under ‘Deployment Info’, choose iPad from ‘Devices’. A pop-up will appear asking if you want to copy the iPhone interface and use it for iPad. Choose ‘Dont Copy’. Now from the ‘Main Interface’ drop down menu, choose “MainStoryboard_iPad.storyboard” .&lt;/p&gt;
&lt;p&gt;And done!&lt;/p&gt;
&lt;p&gt;You may have to re-arrange all the views in your interface but thats not really much of a headache compared to creating a new UI from scratch.&lt;/p&gt;
&lt;p&gt;Inspiration for this post: &lt;a href=&#34;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&#34;&gt;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&#34;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
