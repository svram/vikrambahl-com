<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ios on Vikram Bahl</title>
    <link>https://vikrambahl.com/tags/ios/</link>
    <description>Recent content in ios on Vikram Bahl</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2008–2021, Vikram Bahl; all rights reserved.</copyright>
    <lastBuildDate>Fri, 19 Feb 2016 08:14:49 +0000</lastBuildDate><atom:link href="https://vikrambahl.com/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Accessing files stored by the iOS Simulator</title>
      <link>https://vikrambahl.com/accessing-files-stored-ios-simulator/</link>
      <pubDate>Fri, 19 Feb 2016 08:14:49 +0000</pubDate>
      
      <guid>https://vikrambahl.com/accessing-files-stored-ios-simulator/</guid>
      <description>
        
          &lt;p&gt;iOS provides limited access to the directory structure for your device. You may often wonder what it looks like. If you are creating a temporary plist or generating a text file, you may want to see where exactly it gets stored on your device. For those with non-jailbroken devices, this can be a difficult task. Yes, you can always work with relative paths inside Xcode and there’s no problem, but certain frameworks generate files which are stored locally on the device. For eg.,  the &lt;a href=&#34;http://www.politepix.com/openears/&#34;&gt;OpenEars&lt;/a&gt; library running the &lt;a href=&#34;http://cmusphinx.sourceforge.net/wiki/&#34;&gt;CMU speech recognition&lt;/a&gt; engine generates a dictionary and language model (.arpa and .DMP) and stores it ‘somewhere’ on the device. To access the directory structure for your iOS simulator, type in the following command in Terminal:&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;pre lang=&#34;bash&#34;&gt;open -R `find ~/Library/Developer/CoreSimulator/Devices \
 -type d -depth 5 -name &#34;*.app&#34; -print0 | xargs -0 stat -f \
 &#34;%m %N&#34; | sort -rn | head -1 | cut -f2- -d&#34; &#34;`

&lt;/pre&gt;
&lt;p&gt;That will open the folder where your simulator has stored your filed. Now you just have to search for your filename and voila. Note that the above command opens up 5 levels deep in your folder structure. So you may have to move up a few level and then search for the file you are looking for.&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/macos-folder.png&#34;&gt;

        
      </description>
    </item>
    
    <item>
      <title>Converting Storyboard from iPhone to iPad in 4 simple steps</title>
      <link>https://vikrambahl.com/convert-storyboard-iphone-ipad-simple/</link>
      <pubDate>Fri, 04 Jul 2014 09:56:41 +0000</pubDate>
      
      <guid>https://vikrambahl.com/convert-storyboard-iphone-ipad-simple/</guid>
      <description>
        
          &lt;p&gt;Developing a universal iOS app means that you have to maintain two storyboards. Sometimes, all you want is your iPad user interface to be somewhat similar to your iPhone UI. However, making 2 interfaces is a big pain and a mega resource expender. The solution is simple. Just create your iPhone UI in Xcode as you do, then to make a new storyboard for the iPad without doing unnecessary back breaking, do the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make a copy of your iPhone storyboard in Xcode. You can do this by right clicking on the storyboard file in Xcode and selecting “Show in Finder”. Now locate the storyboard file in the finder window that pops (you may have to go into a few folders to find it). Copy the file to desktop and rename it “MainStoryboard_iPad.storyboard”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now open this file “MainStoryboard_iPad.storyboard” in a text editor like Text Wrangler or Sublime Text etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Now perform the following 2 search and replaces in the “MainStoryboard_iPad.storyboard” file:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for&lt;/p&gt;
&lt;pre&gt;targetRuntime=&#34;iOS.CocoaTouch&#34;&lt;/pre&gt;
&lt;p&gt;and replace it with&lt;/p&gt;
&lt;pre&gt;targetRuntime=&#34;iOS.CocoaTouch.iPad&#34;&lt;/pre&gt;
&lt;p&gt; &lt;/li&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Search for&lt;/p&gt;
&lt;pre&gt;&amp;lt;simulatedScreenMetrics key=&#34;destination&#34; type=&#34;retina4&#34;/&amp;gt;&lt;/pre&gt;
&lt;p&gt;and replace it with&lt;/p&gt;
&lt;pre&gt;&amp;lt;simulatedScreenMetrics key=&#34;destination&#34;/&amp;gt;&lt;/pre&gt;&lt;/ul&gt; 
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Save the file. Reopen Xcode and add this file to the project either by dragging and dropping to the project folder or by going to File -&amp;gt; Add Files to &lt;your-project-name&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now head over to the ‘General’ section by choosing your applications target in Xcode. Under ‘Deployment Info’, choose iPad from ‘Devices’. A pop-up will appear asking if you want to copy the iPhone interface and use it for iPad. Choose ‘Dont Copy’. Now from the ‘Main Interface’ drop down menu, choose “MainStoryboard_iPad.storyboard” .&lt;/p&gt;
&lt;p&gt;And done!&lt;/p&gt;
&lt;p&gt;You may have to re-arrange all the views in your interface but thats not really much of a headache compared to creating a new UI from scratch.&lt;/p&gt;
&lt;p&gt;Inspiration for this post: &lt;a href=&#34;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&#34;&gt;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/8465769/converting-storyboard-from-iphone-to-ipad&#34;&gt; &lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

        
      </description>
    </item>
    
    <item>
      <title>Adding Animated Gif’s in iOS Applications using Xcode Storyboards</title>
      <link>https://vikrambahl.com/animated-gifs-ios-xcode-storyboards/</link>
      <pubDate>Thu, 03 Jul 2014 02:41:05 +0000</pubDate>
      
      <guid>https://vikrambahl.com/animated-gifs-ios-xcode-storyboards/</guid>
      <description>
        
          &lt;p style=&#34;text-align: left;&#34;&gt;
  There is no out of the box support provided by Apple to add animated GIF&amp;#8217;s to your iOS applications. There are many convoluted solutions available on the interwebs. After trying a few, I have come to rely on the super-easy to integrate solution by Flipboard Inc. (key development by Flipboard engineer &lt;a href=&#34;http://www.raphaelschaad.com/&#34;&gt;Raphael Schaad&lt;/a&gt;, follow him &lt;a href=&#34;https://twitter.com/raphaelschaad&#34;&gt;on twitter&lt;/a&gt;)Their library makes it a piece of cake to add animated GIF&amp;#8217;s to your iOS applications using storyboards in Xcode. Following this, your app will support animated GIF&amp;#8217;s. This post will walk you step by step through the process of doing so.
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  Download code from Github: &lt;a href=&#34;https://github.com/svram/AnimatedGIF-Xcode-Storyboards-iOS&#34;&gt;https://github.com/svram/AnimatedGIF-Xcode-Storyboards-iOS&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  1) This is what your app will look like if you follow all the steps (it&amp;#8217;ll be smoother in the simulation, had to convert a .mov file to gif):
&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/gifMovie3.gif&#34;&gt;
&lt;ul style=&#34;text-align: left;&#34;&gt;
  &lt;li&gt;
    Open Xcode, create a new project  and choose the &amp;#8220;Single View Application&amp;#8221; template.
  &lt;/li&gt;
  &lt;li&gt;
    Enter Product, Organisation &amp; Company names. Enter a class prefix and choose iPhone from the devices drop down menu.
  &lt;/li&gt;
  &lt;li&gt;
    Save the project to disk
  &lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  2)  Download Flipboards FLAnimatedImage library from github:
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  &lt;a href=&#34;https://github.com/Flipboard/FLAnimatedImage&#34;&gt;https://github.com/Flipboard/FLAnimatedImage&lt;/a&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  (Just download the ZIP file to your disk)
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  3) Open Xcode and right-click the project in the project navigator and choose &amp;#8216;New Group&amp;#8217;. A new folder gets added to your project files. Name this folder &amp;#8216;Library&amp;#8217;.
&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/newgroup.png&#34; alt= &#34;Create new group in Xcode named &amp;#8216;Library&amp;#8217;&#34;&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/newgroup2.png&#34; alt= &#34;Create new group in Xcode named &amp;#8216;Library&amp;#8217;&#34;&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  4) Now open the folder where you saved the FLAnimatedImage library you downloaded in Step 2.
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  Locate the following four files and drag them to the &amp;#8216;Library&amp;#8217; folder in Xcode that you created in Step 3.
&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;FLAnimatedImage.h

FLAnimatedImage.m

FLAnimatedImageView.h

FLAnimatedImageView.m&lt;/pre&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  It should be located in the folder hierarchy:
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  FLAnimatedImage-master -&gt; FLAnimatedImageDemo -&gt; FLAnimatedImage
&lt;/p&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  When prompted, select the &amp;#8216;Copy items into destination groups folder&amp;#8217; and click ok.
&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/dragfiles.png&#34; alt= &#34;Drag and add the FLAnimatedImageView to the Library folder&#34;&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/addToLibrary.png&#34; alt= &#34;Drag and add the FLAnimatedImageView to the Library folder&#34;&gt;
&lt;p style=&#34;text-align: left;&#34;&gt;
  5) Open your ViewController.h and add the following import statements:
&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;#import &#34;FLAnimatedImage.h&#34;
#import &#34;FLAnimatedImageView.h&#34;&lt;/pre&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Open the Main Storyboard file and add 3 UIImageView objects from the Object Library in the Utilities area on the right. Resize them so your storyboard looks like the one below.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; &lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/addComponents.png&#34; alt= &#34;Drag 3 UIImageView objects to the storyboard&#34;&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/alignComponents.png&#34; alt= &#34;Final storyboard orientation with 3 image views&#34;&gt;
&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;Now click on one of the UIImageView objects that you added to the storyboard and under the Identity Inspector on the right, locate  the ‘Custom Class’ section. In the ‘Class’ text field enter ‘FLAnimatedImageView’.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Do this for all 3 UIImageView objects. The objects are of type FLAnimatedImageView which is a subclass of UIImageView.&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/changeClass.png&#34; alt= &#34;Change the class of each of the image views to FLAnimatedImageView in the Identity Inspector in Xcode&#34;&gt;
&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Open the Assistance Editor in Xcode such that the Storyboard and your ViewController.h files are side by side.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Control drag from each of the image views in the storyboard to your ViewController.h file between the @interface and @end statements. Give your outlet a name and let it be of type FLAnimatedImageView. At the end of it, your ViewController.h file should look like this:&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;
#import &#34;FLAnimatedImageView.h&#34;
#import &#34;FLAnimatedImage.h&#34;

@interface VBViewController : UIViewController
@property (strong, nonatomic) IBOutlet FLAnimatedImageView *lightningImageView;
@property (strong, nonatomic) IBOutlet FLAnimatedImageView *manWalkingImageView;

@property (strong, nonatomic) IBOutlet FLAnimatedImageView *pageLoadingImageView;

@end&lt;/pre&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/addCode.png&#34; alt= &#34;Connect outlets from the FLAnimatedImageViews in the storyboard to the ViewController.h file&#34;&gt;
&lt;ol start=&#34;9&#34;&gt;
&lt;li&gt;With your view controller selected in the storyboard, we will add a navigation controller for aesthetics sake. In the menubar, go to Editor -&amp;gt; Embed In -&amp;gt; Navigation Controller.&lt;/li&gt;
&lt;/ol&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/embed.png&#34; alt= &#34;Add a navigation controller in Xcode storyboard&#34;&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;Open your ViewController.m file and add code to the viewDidLoad: method to set the title of the navigation bar.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre lang=&#34;objc&#34;&gt;self.title = @&#34;I Love GIF&#39;s&#34;;&lt;/pre&gt;
&lt;p&gt;Now, we will add 3 gifs to each of the image views programmatically. First download them to your disk here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vikrambahl.com/wp-content/uploads/2014/07/manWalking.gif&#34;&gt;http://vikrambahl.com/wp-content/uploads/2014/07/manWalking.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://vikrambahl.com/wp-content/uploads/2014/07/lightning.gif&#34;&gt;http://vikrambahl.com/wp-content/uploads/2014/07/lightning.gif&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The third GIF we will load via a URL.&lt;/p&gt;
&lt;p&gt;Just right click and save it.&lt;/p&gt;
&lt;p&gt;Once saved, add it to your project by dragging the images to your project folder in Xcode. When prompted, select Copy items into destination groups folder.&lt;/p&gt;
&lt;img src=&#34;https://vikrambahl.com/images/flanimatedimage-ios/addGifs.png&#34; alt= &#34;Adding GIF&amp;#8217;s to the project folder in Xcode&#34;&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;Now we will load each of the three images with FLAnimatedImage instead of UIImage. Add the following code to your viewDidLoad: method in your ViewController.m file:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre lang=&#34;objc&#34;&gt;FLAnimatedImage *manWalkingImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&#34;manWalking&#34; ofType:@&#34;gif&#34;]]];

FLAnimatedImage *lightningImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&#34;lightning&#34; ofType:@&#34;gif&#34;]]];

FLAnimatedImage *loadingImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@&#34;http://vikrambahl.com/wp-content/uploads/2014/06/ajax_loader_blue_512.gif&#34;]]];&lt;/pre&gt;
&lt;p&gt;Now,  assign the FLAnimatedImage types to each of the FLAnimatedImageViews via the animatedImage property:&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;self.lightningImageView.animatedImage = lightningImage;&lt;/pre&gt;
&lt;p&gt;And add the FLAnimatedImage view objects as subviews:&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;[self.view addSubview:self.lightningImageView];&lt;/pre&gt;
&lt;p&gt;Finally, your viewDidLoad: method should look like this:&lt;/p&gt;
&lt;pre lang=&#34;objc&#34;&gt;- (void)viewDidLoad

{

[super viewDidLoad];

// Do any additional setup after loading the view, typically from a nib.

//Set the title of the naviagation bar

self.title = @&#34;I Love GIF&#39;s&#34;;

//Add the gifs as FLAnimatedImage objects

FLAnimatedImage *manWalkingImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&#34;manWalking&#34; ofType:@&#34;gif&#34;]]];

FLAnimatedImage *lightningImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfFile:[[NSBundle mainBundle] pathForResource:@&#34;lightning&#34; ofType:@&#34;gif&#34;]]];

//Loading a gif from URL

FLAnimatedImage *loadingImage = [[FLAnimatedImage alloc] initWithAnimatedGIFData:[NSData dataWithContentsOfURL:[NSURL URLWithString:@&#34;http://vikrambahl.com/wp-content/uploads/2014/06/ajax_loader_blue_512.gif&#34;]]];

//Assign the FLAnimatedImage types to each of the FLAnimatedImageViews via the animatedImage property

self.lightningImageView.animatedImage = lightningImage;

self.manWalkingImageView.animatedImage = manWalkingImage;

self.pageLoadingImageView.animatedImage = loadingImage;

//Add the FLAnimatedImage view objects as subviews

[self.view addSubview:self.lightningImageView];

[self.view addSubview:self.manWalkingImageView];

[self.view addSubview:self.pageLoadingImageView];

}&lt;/pre&gt;
&lt;p&gt;Now just run the program in the simulator and you should see your three GIFs loading perfectly.&lt;/p&gt;

        
      </description>
    </item>
    
    <item>
      <title>Google Maps SDK for iOS in Xcode Storyboard</title>
      <link>https://vikrambahl.com/google-maps-ios-xcode-storyboards/</link>
      <pubDate>Tue, 01 Jul 2014 05:20:40 +0000</pubDate>
      
      <guid>https://vikrambahl.com/google-maps-ios-xcode-storyboards/</guid>
      <description>
        
          &lt;p&gt;Developing a location based application on iOS with Google Maps is super easy with the Google Maps SDK for iOS. So here’s the complete step-by-step way to add a google map to your iOS application using storyboards in Xcode 5.&lt;/p&gt;
&lt;p&gt;This is what your app will look like in the end:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/finalApp.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/finalApp.png&#34; alt=&#34;Google Maps in iPhone using Xcode Storyboards&#34; title=&#34;Google Maps in iPhone using Xcode Storyboards&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Download code from Github: &lt;a href=&#34;https://github.com/svram/GoogleMapSDKiOS-Storyboards&#34;&gt;https://github.com/svram/GoogleMapSDKiOS-Storyboards&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download the Google Maps SDK for iOS:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/maps/documentation/ios/start#getting_the_google_maps_sdk_for_ios&#34;&gt;https://developers.google.com/maps/documentation/ios/start#getting_the_google_maps_sdk_for_ios&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The current version is 1.8.1&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Obtain an API key from the Google Developers console. Do the easy to follow instructions here:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/maps/documentation/ios/start#the_google_maps_api_key&#34;&gt;https://developers.google.com/maps/documentation/ios/start#the_google_maps_api_key&lt;/a&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Setup Xcode Environment to work with Google Maps SDK&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a) Open Xcode and Create a new project.&lt;/p&gt;
&lt;p&gt;b) Create a new ‘Single View Application’ template.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/singleViewApp.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/singleViewApp.png&#34; alt=&#34;Create Single View Application in Xcode&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Create Single View Application in Xcode&lt;/p&gt;
&lt;p&gt;c) Enter Product, Organization &amp;amp; Company names. Enter a class prefix and choose iPhone from the devices drop down menu.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/add-details.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/add-details.png&#34; alt=&#34;Add product name, company etc&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Add product name, company etc&lt;/p&gt;
&lt;p&gt;d) Save your project to disk.&lt;/p&gt;
&lt;p&gt;e) Unzip and open the Google Maps iOS SDK that you downloaded in Step 1.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/add-framework.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/add-framework.png&#34; alt=&#34;Google Maps SDK iOS folder on desktop&#34; title=&#34;Google Maps SDK iOS folder on desktop&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;f) Add the “GoogleMaps.framework” bundle to the “Frameworks” Folder in Xcode by dragging it there. When prompted, select “Copy items into destination group’s folder”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/drag-image.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/drag-image.png&#34; alt=&#34;Drag the GoogleMaps.framework bundle to the Frameworks folder in Xcode&#34; title=&#34;Drag the GoogleMaps.framework bundle to the Frameworks folder in Xcode&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/copy-items.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/copy-items.png&#34; alt=&#34;Select Copy items into destination group&#39;s folder&#34; title=&#34;Select Copy items into destination group&#39;s folder&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;g) Similarly, drag the “GoogleMaps.bundle” from the  &lt;em&gt;GoogleMaps.framework -&amp;gt; Resources&lt;/em&gt;  folder to the “Frameworks” folder in Xcode. When prompted DO NOT select “Copy items into destination group’s folder”.&lt;/p&gt;
&lt;p&gt;f) Then, select your project from the Project Navigator and select your applications “Target” (not the “Project”).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/select-target.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/select-target.png&#34; alt=&#34;Select applications Target in project navigator&#34; title=&#34;Select applications Target in project navigator&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;g) Then go to the “Build Phases” tab and then open “Link Binary With Libraries”. Then click on the “+” button at the bottom left and add the following libraries to be compiled along with your app binaries:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AVFoundation.framework&lt;/li&gt;
&lt;li&gt;CoreData.framework&lt;/li&gt;
&lt;li&gt;CoreLocation.framework&lt;/li&gt;
&lt;li&gt;CoreText.framework&lt;/li&gt;
&lt;li&gt;GLKit.framework&lt;/li&gt;
&lt;li&gt;ImageIO.framework&lt;/li&gt;
&lt;li&gt;libc++.dylib&lt;/li&gt;
&lt;li&gt;libicucore.dylib&lt;/li&gt;
&lt;li&gt;libz.dylib&lt;/li&gt;
&lt;li&gt;OpenGLES.framework&lt;/li&gt;
&lt;li&gt;QuartzCore.framework&lt;/li&gt;
&lt;li&gt;SystemConfiguration.framework&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/build-phases.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/build-phases.png&#34; alt=&#34;Go To Build Phases -&gt; Link Binary With Libraries&#34; title=&#34;Go To Build Phases -&amp;gt; Link Binary With Libraries&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/add-frameworks.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/add-frameworks.png&#34; alt=&#34;Add the frameworks&#34; title=&#34;Add the frameworks&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is what your Xcode environment should look like:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/after-adding-frameworks.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/after-adding-frameworks.png&#34; alt=&#34;XCode environment after adding the frameworks&#34; title=&#34;XCode environment after adding the frameworks&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;h) Now choose your “Project” rather than a “Target” and open the “Build Settings” tab. Scroll down till you find the “Linking” section and under that find “Other Linker Flags”. Now open the section and click the “+” next to “Debug” and add “-ObjC” in the text field. If these settings are not visible, change the filter in the “Build Settings” to “All” instead of “Basic”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/other-linker-flags.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/other-linker-flags.png&#34; alt=&#34;Add the &#39;-ObjC&#39; flag in Other Linker Flags under Build Settings tab&#34; title=&#34;Add the &#39;-ObjC&#39; flag in Other Linker Flags under Build Settings tab&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Add the ‘-ObjC’ flag in Other Linker Flags under Build Settings tab&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Begin Coding&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;a) Open your AppDelegate.m file and add the following import statement:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#import &amp;lt;GoogleMaps/GoogleMaps.h&amp;gt;;

//Copy the API Key you created in Step 2 and enter the following code in the method

application: didFinishLaunchingWithOptions:

[GMSServices provideAPIKey:@&amp;quot;API_KEY&amp;quot;];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace API_KEY with your API key.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/add-api-key.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/add-api-key.png&#34; alt=&#34;Add Google Maps API Key to the AppDelegate.m application:didFinishLaunchingWithOptions: method&#34; title=&#34;Add Google Maps API Key to the AppDelegate.m application:didFinishLaunchingWithOptions: method&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;b) Open “Main.Storyboard” and drag a UIView object from the Object Library. Now open the Identity Inspector and under Custom Class add “GMSMapView”.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/drag-uiview.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/drag-uiview.png&#34; alt=&#34;Drag a UIView from object library to the main storyboard&#34; title=&#34;Drag a UIView from object library to the main storyboard&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/add-custom-class.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/add-custom-class.png&#34; alt=&#34;Assign Custom class &#39;GMSMapView&#39; to the UIView object in the Identity Inspector&#34; title=&#34;Assign Custom class &#39;GMSMapView&#39; to the UIView object in the Identity Inspector&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;c) Control drag from the UIView (GMSMapView) object to your ViewController.h file to create an outlet with the name “mapView”. Don’t forget to add the GoogleMaps import statement in your ViewController.h file.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/mapview-outlet.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/mapview-outlet.png&#34; alt=&#34;Create an outlet for the GMSMapView object in the ViewController.h file&#34; title=&#34;Create an outlet for the GMSMapView object in the ViewController.h file&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;d) Make the ViewController conform to the “GMSMapViewDelegate” protocol.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/delegate-protocol.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/delegate-protocol.png&#34; alt=&#34;Make the ViewController conform to the GMSMapViewDelegate protocol&#34; title=&#34;Make the ViewController conform to the GMSMapViewDelegate protocol&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;e) Finally, add the following code to your ViewController.m file in the viewDidLoad: method&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//Controls whether the My Location dot and accuracy circle is enabled.
 
self.mapView.myLocationEnabled = YES;
 
//Controls the type of map tiles that should be displayed.
 
self.mapView.mapType = kGMSTypeNormal;
 
//Shows the compass button on the map
 
self.mapView.settings.compassButton = YES;
 
//Shows the my location button on the map
 
self.mapView.settings.myLocationButton = YES;
 
//Sets the view controller to be the GMSMapView delegate
 
self.mapView.delegate = self;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/viewdidload.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/viewdidload.png&#34; alt=&#34;viewDidLoad: method in ViewController.m&#34; title=&#34;viewDidLoad: method in ViewController.m&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;f) Now run the app in the simulator. Choose a location from the Debug -&amp;gt; Location menu option. Click on the my location button the app to move to your current location. And done!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/debug-location.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/debug-location.png&#34; alt=&#34;iOS Simulator choose location from Debug -&gt; Location&#34; title=&#34;iOS Simulator choose location from Debug -&amp;gt; Location&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/successful-maps-add.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/successful-maps-add.png&#34; alt=&#34;Successfully added a google map to Xcode storyboard&#34; title=&#34;Successfully added a google map to Xcode storyboard&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;g) Almost done. Finally some cosmetic changes. Go to your main storyboard and click on the view controller. Now go to the menu add a navigation controller by choosing “Editor -&amp;gt; Embed In -&amp;gt; Navigation Controller”.&lt;/p&gt;
&lt;p&gt;This will add a navigator controller to your main storyboard.&lt;/p&gt;
&lt;p&gt;Next give the navigation bar a title by adding the following code in your ViewController.m file:&lt;/p&gt;
&lt;p&gt;self.title = @&amp;quot;Google Maps in iOS&amp;quot;;&lt;/p&gt;
&lt;p&gt;Feel free to add any other UIView objects. I have added a dummy button and a UITextView object.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://vikrambahl.com/images/google-maps-ios/embed-navcontroller.png&#34;&gt;&lt;img src=&#34;https://vikrambahl.com/images/google-maps-ios/embed-navcontroller.png&#34; alt=&#34;Embed a Navigation Controller&#34; title=&#34;Embed a Navigation Controller&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Get the project files on  &lt;a href=&#34;https://github.com/svram/GoogleMapSDKiOS-Storyboards&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;

        
      </description>
    </item>
    
  </channel>
</rss>
